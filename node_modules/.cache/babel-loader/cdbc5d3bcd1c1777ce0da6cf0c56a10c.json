{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  items: [],\n  totalAmount: 0\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducer: {\n    addItemToCart(state, action) {\n      //   updatedTotalAmount =\n      //     state.totalAmount + action.item.price * action.item.amount;\n      //state.totalAmount =   state.totalAmount + action.item.price * action.item.amount;\n      state.totalAmount = state.totalAmount + action.payload.price * action.payload.amount;\n      const existingCartItemIndex = state.items.findIndex(item => item.id === action.payload.id);\n      const existingCartItem = state.items[existingCartItemIndex]; //let updatedItems;\n\n      if (existingCartItem) {\n        const updatedItem = { ...existingCartItem,\n          amount: existingCartItem.amount + action.payload.amount\n        };\n        state.items = [...state.items];\n        state.items[existingCartItemIndex] = updatedItem;\n      } else {\n        state.items = state.items.concat(action.payload);\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const existingCartItemIndex = state.items.findIndex( // (item) => item.id === action.id\n      item => item.id === action.payload);\n      const existingItem = state.items[existingCartItemIndex]; // const updatedTotalAmount = state.totalAmount - existingItem.price;\n\n      state.totalAmount = state.totalAmount - existingItem.price; //let updatedItems;\n\n      if (existingItem.amount === 1) {\n        state.items = state.items.filter(item => item.id !== action.payload);\n      } else {\n        const updatedItem = { ...existingItem,\n          amount: existingItem.amount - 1\n        };\n        state.items = [...state.items];\n        state.items[existingCartItemIndex] = updatedItem;\n      }\n    }\n\n  }\n}); // const cartReducer = (state = initialState, action) => {\n// }\n\nconst store = createStore(cartSlice.reducer);\nexport const actions = cartActions;\nexport default store;","map":{"version":3,"sources":["/home/harshraj/Desktop/Market-App/src/redux-store/index.js"],"names":["createStore","createSlice","initialState","items","totalAmount","cartSlice","name","reducer","addItemToCart","state","action","payload","price","amount","existingCartItemIndex","findIndex","item","id","existingCartItem","updatedItem","concat","removeItemFromCart","existingItem","filter","store","actions","cartActions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAGA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,KAAK,EAAG,EAAV;AAAcC,EAAAA,WAAW,EAAG;AAA5B,CAArB;AAEA,MAAMC,SAAS,GAAGJ,WAAW,CAAC;AAC1BK,EAAAA,IAAI,EAAE,MADoB;AAE1BJ,EAAAA,YAF0B;AAG1BK,EAAAA,OAAO,EAAG;AACNC,IAAAA,aAAa,CAACC,KAAD,EAAOC,MAAP,EAAe;AAE5B;AACA;AAEE;AACAD,MAAAA,KAAK,CAACL,WAAN,GAAsBK,KAAK,CAACL,WAAN,GAAoBM,MAAM,CAACC,OAAP,CAAeC,KAAf,GAAuBF,MAAM,CAACC,OAAP,CAAeE,MAAhF;AAGA,YAAMC,qBAAqB,GAAGL,KAAK,CAACN,KAAN,CAAYY,SAAZ,CAC3BC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYP,MAAM,CAACC,OAAP,CAAeM,EADT,CAA9B;AAGA,YAAMC,gBAAgB,GAAGT,KAAK,CAACN,KAAN,CAAYW,qBAAZ,CAAzB,CAZ0B,CAc1B;;AAEA,UAAII,gBAAJ,EAAsB;AACpB,cAAMC,WAAW,GAAG,EAClB,GAAGD,gBADe;AAElBL,UAAAA,MAAM,EAAEK,gBAAgB,CAACL,MAAjB,GAA0BH,MAAM,CAACC,OAAP,CAAeE;AAF/B,SAApB;AAKAJ,QAAAA,KAAK,CAACN,KAAN,GAAc,CAAC,GAAGM,KAAK,CAACN,KAAV,CAAd;AACAM,QAAAA,KAAK,CAACN,KAAN,CAAYW,qBAAZ,IAAqCK,WAArC;AACD,OARD,MASK;AACHV,QAAAA,KAAK,CAACN,KAAN,GAAcM,KAAK,CAACN,KAAN,CAAYiB,MAAZ,CAAmBV,MAAM,CAACC,OAA1B,CAAd;AACD;AACF,KA7BK;;AAgCNU,IAAAA,kBAAkB,CAACZ,KAAD,EAAOC,MAAP,EAAe;AAE7B,YAAMI,qBAAqB,GAAGL,KAAK,CAACN,KAAN,CAAYY,SAAZ,EAC3B;AACCC,MAAAA,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYP,MAAM,CAACC,OAFF,CAA9B;AAIE,YAAMW,YAAY,GAAGb,KAAK,CAACN,KAAN,CAAYW,qBAAZ,CAArB,CAN2B,CAO5B;;AAEAL,MAAAA,KAAK,CAACL,WAAN,GAAoBK,KAAK,CAACL,WAAN,GAAoBkB,YAAY,CAACV,KAArD,CAT4B,CAW3B;;AACA,UAAIU,YAAY,CAACT,MAAb,KAAwB,CAA5B,EAA+B;AAC7BJ,QAAAA,KAAK,CAACN,KAAN,GAAcM,KAAK,CAACN,KAAN,CAAYoB,MAAZ,CAAmBP,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYP,MAAM,CAACC,OAA9C,CAAd;AACD,OAFD,MAEO;AACL,cAAMQ,WAAW,GAAG,EAAE,GAAGG,YAAL;AAAmBT,UAAAA,MAAM,EAAES,YAAY,CAACT,MAAb,GAAsB;AAAjD,SAApB;AACAJ,QAAAA,KAAK,CAACN,KAAN,GAAc,CAAC,GAAGM,KAAK,CAACN,KAAV,CAAd;AACAM,QAAAA,KAAK,CAACN,KAAN,CAAYW,qBAAZ,IAAqCK,WAArC;AACD;AAGN;;AArDK;AAHgB,CAAD,CAA7B,C,CA8DA;AAGA;;AAGA,MAAMK,KAAK,GAAGxB,WAAW,CAACK,SAAS,CAACE,OAAX,CAAzB;AAEA,OAAO,MAAMkB,OAAO,GAAGC,WAAhB;AAGP,eAAeF,KAAf","sourcesContent":["import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\n\n\nconst initialState = { items : [], totalAmount : 0};\n\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState,\n    reducer : {\n        addItemToCart(state,action) {\n\n        //   updatedTotalAmount =\n        //     state.totalAmount + action.item.price * action.item.amount;\n\n          //state.totalAmount =   state.totalAmount + action.item.price * action.item.amount;\n          state.totalAmount =   state.totalAmount + action.payload.price * action.payload.amount;\n\n\n          const existingCartItemIndex = state.items.findIndex(\n            (item) => item.id === action.payload.id\n          );\n          const existingCartItem = state.items[existingCartItemIndex];\n\n          //let updatedItems;\n      \n          if (existingCartItem) {\n            const updatedItem = {\n              ...existingCartItem,\n              amount: existingCartItem.amount + action.payload.amount,\n            };\n\n            state.items = [...state.items];\n            state.items[existingCartItemIndex] = updatedItem;\n          } \n          else {\n            state.items = state.items.concat(action.payload);\n          }\n        },\n\n\n        removeItemFromCart(state,action) {\n\n            const existingCartItemIndex = state.items.findIndex(\n               // (item) => item.id === action.id\n               (item) => item.id === action.payload\n              );\n              const existingItem = state.items[existingCartItemIndex];\n             // const updatedTotalAmount = state.totalAmount - existingItem.price;\n\n             state.totalAmount = state.totalAmount - existingItem.price;\n\n              //let updatedItems;\n              if (existingItem.amount === 1) {\n                state.items = state.items.filter(item => item.id !== action.payload);\n              } else {\n                const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n                state.items = [...state.items];\n                state.items[existingCartItemIndex] = updatedItem;\n              }\n          \n\n        },\n    }\n});\n\n\n\n// const cartReducer = (state = initialState, action) => {\n\n\n// }\n\n\nconst store = createStore(cartSlice.reducer);\n\nexport const actions = cartActions;\n\n\nexport default store;"]},"metadata":{},"sourceType":"module"}