{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  items: [],\n  totalAmount: 0\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducer: {\n    addItemToCart(state, action) {// //   updatedTotalAmount =\n      // //     state.totalAmount + action.item.price * action.item.amount;\n      //   //state.totalAmount =   state.totalAmount + action.item.price * action.item.amount;\n      //   state.totalAmount =   state.totalAmount + action.payload.price * action.payload.amount;\n      //   const existingCartItemIndex = state.items.findIndex(\n      //     (item) => item.id === action.payload.id\n      //   );\n      //   const existingCartItem = state.items[existingCartItemIndex];\n      //   //let updatedItems;\n      //   if (existingCartItem) {\n      //     const updatedItem = {\n      //       ...existingCartItem,\n      //       amount: existingCartItem.amount + action.payload.amount,\n      //     };\n      //     state.items = [...state.items];\n      //     state.items[existingCartItemIndex] = updatedItem;\n      //   } \n      //   else {\n      //     state.items = state.items.concat(action.payload);\n      //   }\n    },\n\n    removeItemFromCart(state, action) {\n      // const existingCartItemIndex = state.items.findIndex(\n      //    // (item) => item.id === action.id\n      //    (item) => item.id === action.payload\n      //   );\n      //   const existingItem = state.items[existingCartItemIndex];\n      //  // const updatedTotalAmount = state.totalAmount - existingItem.price;\n      //  state.totalAmount = state.totalAmount - existingItem.price;\n      //   //let updatedItems;\n      //   if (existingItem.amount === 1) {\n      //     state.items = state.items.filter(item => item.id !== action.payload);\n      //   } else {\n      //     const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n      //     state.items = [...state.items];\n      //     state.items[existingCartItemIndex] = updatedItem;\n      //   }\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalAmount = state.totalAmount - existingItem.price;\n\n      if (existingItem.amount == 1) {\n        state.items = state.items.filter(item => item.id != id);\n      } else {\n        existingItem.amount--;\n      }\n    }\n\n  }\n}); // const cartReducer = (state = initialState, action) => {\n// }\n\nconst store = createStore(cartSlice.reducer);\nexport const cartActions = cartSlice.reducer;\nexport default store;","map":{"version":3,"sources":["/home/harshraj/Desktop/Market-App/src/redux-store/index.js"],"names":["createStore","createSlice","initialState","items","totalAmount","cartSlice","name","reducer","addItemToCart","state","action","removeItemFromCart","id","payload","existingItem","find","item","price","amount","filter","store","cartActions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAGA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,KAAK,EAAG,EAAV;AAAcC,EAAAA,WAAW,EAAG;AAA5B,CAArB;AAEA,MAAMC,SAAS,GAAGJ,WAAW,CAAC;AAC1BK,EAAAA,IAAI,EAAE,MADoB;AAE1BJ,EAAAA,YAF0B;AAG1BK,EAAAA,OAAO,EAAG;AACNC,IAAAA,aAAa,CAACC,KAAD,EAAOC,MAAP,EAAe,CAE5B;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACC,KA7BK;;AAgCNC,IAAAA,kBAAkB,CAACF,KAAD,EAAOC,MAAP,EAAe;AAE7B;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,YAAME,EAAE,GAAGF,MAAM,CAACG,OAAlB;AAEA,YAAMC,YAAY,GAAGL,KAAK,CAACN,KAAN,CAAYY,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACJ,EAAL,KAAYA,EAAvC,CAArB;AACAH,MAAAA,KAAK,CAACL,WAAN,GAAoBK,KAAK,CAACL,WAAN,GAAoBU,YAAY,CAACG,KAArD;;AAEA,UAAGH,YAAY,CAACI,MAAb,IAAqB,CAAxB,EAA2B;AACvBT,QAAAA,KAAK,CAACN,KAAN,GAAcM,KAAK,CAACN,KAAN,CAAYgB,MAAZ,CAAoBH,IAAD,IAASA,IAAI,CAACJ,EAAL,IAAWA,EAAvC,CAAd;AACH,OAFD,MAIC;AACIE,QAAAA,YAAY,CAACI,MAAb;AACH;AAIL;;AAnEK;AAHgB,CAAD,CAA7B,C,CA4EA;AAGA;;AAGA,MAAME,KAAK,GAAGpB,WAAW,CAACK,SAAS,CAACE,OAAX,CAAzB;AAEA,OAAO,MAAMc,WAAW,GAAGhB,SAAS,CAACE,OAA9B;AAGP,eAAea,KAAf","sourcesContent":["import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\n\n\nconst initialState = { items : [], totalAmount : 0};\n\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState,\n    reducer : {\n        addItemToCart(state,action) {\n\n        // //   updatedTotalAmount =\n        // //     state.totalAmount + action.item.price * action.item.amount;\n\n        //   //state.totalAmount =   state.totalAmount + action.item.price * action.item.amount;\n        //   state.totalAmount =   state.totalAmount + action.payload.price * action.payload.amount;\n\n\n        //   const existingCartItemIndex = state.items.findIndex(\n        //     (item) => item.id === action.payload.id\n        //   );\n        //   const existingCartItem = state.items[existingCartItemIndex];\n\n        //   //let updatedItems;\n      \n        //   if (existingCartItem) {\n        //     const updatedItem = {\n        //       ...existingCartItem,\n        //       amount: existingCartItem.amount + action.payload.amount,\n        //     };\n\n        //     state.items = [...state.items];\n        //     state.items[existingCartItemIndex] = updatedItem;\n        //   } \n        //   else {\n        //     state.items = state.items.concat(action.payload);\n        //   }\n        },\n\n\n        removeItemFromCart(state,action) {\n\n            // const existingCartItemIndex = state.items.findIndex(\n            //    // (item) => item.id === action.id\n            //    (item) => item.id === action.payload\n            //   );\n            //   const existingItem = state.items[existingCartItemIndex];\n            //  // const updatedTotalAmount = state.totalAmount - existingItem.price;\n\n            //  state.totalAmount = state.totalAmount - existingItem.price;\n\n            //   //let updatedItems;\n            //   if (existingItem.amount === 1) {\n            //     state.items = state.items.filter(item => item.id !== action.payload);\n            //   } else {\n            //     const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n            //     state.items = [...state.items];\n            //     state.items[existingCartItemIndex] = updatedItem;\n            //   }\n\n            const id = action.payload;\n\n            const existingItem = state.items.find((item) => item.id === id);\n            state.totalAmount = state.totalAmount - existingItem.price;\n\n            if(existingItem.amount==1) {\n                state.items = state.items.filter((item)=> item.id != id);\n            }\n            else\n             {\n                 existingItem.amount--;\n             }\n             \n          \n\n        },\n    }\n});\n\n\n\n// const cartReducer = (state = initialState, action) => {\n\n\n// }\n\n\nconst store = createStore(cartSlice.reducer);\n\nexport const cartActions = cartSlice.reducer;\n\n\nexport default store;"]},"metadata":{},"sourceType":"module"}