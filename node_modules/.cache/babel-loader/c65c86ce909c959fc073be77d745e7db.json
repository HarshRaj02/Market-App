{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  items: [],\n  totalAmount: 0\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducer: {\n    addItemToCart(state, action) {\n      //   updatedTotalAmount =\n      //     state.totalAmount + action.item.price * action.item.amount;\n      //state.totalAmount =   state.totalAmount + action.item.price * action.item.amount;\n      state.totalAmount = state.totalAmount + action.payload.price * action.payload.amount;\n      const existingCartItemIndex = state.items.findIndex(item => item.id === action.payload.id);\n      const existingCartItem = state.items[existingCartItemIndex]; //let updatedItems;\n\n      if (existingCartItem) {\n        const updatedItem = { ...existingCartItem,\n          amount: existingCartItem.amount + action.payload.amount\n        };\n        state.items = [...state.items];\n        state.items[existingCartItemIndex] = updatedItem;\n      } else {\n        state.items = state.items.concat(action.payload);\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      // const existingCartItemIndex = state.items.findIndex(\n      //    // (item) => item.id === action.id\n      //    (item) => item.id === action.payload\n      //   );\n      //   const existingItem = state.items[existingCartItemIndex];\n      //  // const updatedTotalAmount = state.totalAmount - existingItem.price;\n      //  state.totalAmount = state.totalAmount - existingItem.price;\n      //   //let updatedItems;\n      //   if (existingItem.amount === 1) {\n      //     state.items = state.items.filter(item => item.id !== action.payload);\n      //   } else {\n      //     const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n      //     state.items = [...state.items];\n      //     state.items[existingCartItemIndex] = updatedItem;\n      //   }\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalAmount = state.totalAmount - existingItem.price;\n\n      if (existingItem.amount == 1) {\n        state.items = state.items.filter(item => item.id != id);\n      }\n    }\n\n  }\n}); // const cartReducer = (state = initialState, action) => {\n// }\n\nconst store = createStore(cartSlice.reducer);\nexport const cartActions = cartSlice.reducer;\nexport default store;","map":{"version":3,"sources":["/home/harshraj/Desktop/Market-App/src/redux-store/index.js"],"names":["createStore","createSlice","initialState","items","totalAmount","cartSlice","name","reducer","addItemToCart","state","action","payload","price","amount","existingCartItemIndex","findIndex","item","id","existingCartItem","updatedItem","concat","removeItemFromCart","existingItem","find","filter","store","cartActions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAGA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,KAAK,EAAG,EAAV;AAAcC,EAAAA,WAAW,EAAG;AAA5B,CAArB;AAEA,MAAMC,SAAS,GAAGJ,WAAW,CAAC;AAC1BK,EAAAA,IAAI,EAAE,MADoB;AAE1BJ,EAAAA,YAF0B;AAG1BK,EAAAA,OAAO,EAAG;AACNC,IAAAA,aAAa,CAACC,KAAD,EAAOC,MAAP,EAAe;AAE5B;AACA;AAEE;AACAD,MAAAA,KAAK,CAACL,WAAN,GAAsBK,KAAK,CAACL,WAAN,GAAoBM,MAAM,CAACC,OAAP,CAAeC,KAAf,GAAuBF,MAAM,CAACC,OAAP,CAAeE,MAAhF;AAGA,YAAMC,qBAAqB,GAAGL,KAAK,CAACN,KAAN,CAAYY,SAAZ,CAC3BC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYP,MAAM,CAACC,OAAP,CAAeM,EADT,CAA9B;AAGA,YAAMC,gBAAgB,GAAGT,KAAK,CAACN,KAAN,CAAYW,qBAAZ,CAAzB,CAZ0B,CAc1B;;AAEA,UAAII,gBAAJ,EAAsB;AACpB,cAAMC,WAAW,GAAG,EAClB,GAAGD,gBADe;AAElBL,UAAAA,MAAM,EAAEK,gBAAgB,CAACL,MAAjB,GAA0BH,MAAM,CAACC,OAAP,CAAeE;AAF/B,SAApB;AAKAJ,QAAAA,KAAK,CAACN,KAAN,GAAc,CAAC,GAAGM,KAAK,CAACN,KAAV,CAAd;AACAM,QAAAA,KAAK,CAACN,KAAN,CAAYW,qBAAZ,IAAqCK,WAArC;AACD,OARD,MASK;AACHV,QAAAA,KAAK,CAACN,KAAN,GAAcM,KAAK,CAACN,KAAN,CAAYiB,MAAZ,CAAmBV,MAAM,CAACC,OAA1B,CAAd;AACD;AACF,KA7BK;;AAgCNU,IAAAA,kBAAkB,CAACZ,KAAD,EAAOC,MAAP,EAAe;AAE7B;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,YAAMO,EAAE,GAAGP,MAAM,CAACC,OAAlB;AAEA,YAAMW,YAAY,GAAGb,KAAK,CAACN,KAAN,CAAYoB,IAAZ,CAAkBP,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAArB;AACAR,MAAAA,KAAK,CAACL,WAAN,GAAoBK,KAAK,CAACL,WAAN,GAAoBkB,YAAY,CAACV,KAArD;;AAEA,UAAGU,YAAY,CAACT,MAAb,IAAqB,CAAxB,EAA2B;AACvBJ,QAAAA,KAAK,CAACN,KAAN,GAAcM,KAAK,CAACN,KAAN,CAAYqB,MAAZ,CAAoBR,IAAD,IAASA,IAAI,CAACC,EAAL,IAAWA,EAAvC,CAAd;AACH;AAIJ;;AA/DK;AAHgB,CAAD,CAA7B,C,CAwEA;AAGA;;AAGA,MAAMQ,KAAK,GAAGzB,WAAW,CAACK,SAAS,CAACE,OAAX,CAAzB;AAEA,OAAO,MAAMmB,WAAW,GAAGrB,SAAS,CAACE,OAA9B;AAGP,eAAekB,KAAf","sourcesContent":["import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\n\n\nconst initialState = { items : [], totalAmount : 0};\n\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState,\n    reducer : {\n        addItemToCart(state,action) {\n\n        //   updatedTotalAmount =\n        //     state.totalAmount + action.item.price * action.item.amount;\n\n          //state.totalAmount =   state.totalAmount + action.item.price * action.item.amount;\n          state.totalAmount =   state.totalAmount + action.payload.price * action.payload.amount;\n\n\n          const existingCartItemIndex = state.items.findIndex(\n            (item) => item.id === action.payload.id\n          );\n          const existingCartItem = state.items[existingCartItemIndex];\n\n          //let updatedItems;\n      \n          if (existingCartItem) {\n            const updatedItem = {\n              ...existingCartItem,\n              amount: existingCartItem.amount + action.payload.amount,\n            };\n\n            state.items = [...state.items];\n            state.items[existingCartItemIndex] = updatedItem;\n          } \n          else {\n            state.items = state.items.concat(action.payload);\n          }\n        },\n\n\n        removeItemFromCart(state,action) {\n\n            // const existingCartItemIndex = state.items.findIndex(\n            //    // (item) => item.id === action.id\n            //    (item) => item.id === action.payload\n            //   );\n            //   const existingItem = state.items[existingCartItemIndex];\n            //  // const updatedTotalAmount = state.totalAmount - existingItem.price;\n\n            //  state.totalAmount = state.totalAmount - existingItem.price;\n\n            //   //let updatedItems;\n            //   if (existingItem.amount === 1) {\n            //     state.items = state.items.filter(item => item.id !== action.payload);\n            //   } else {\n            //     const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n            //     state.items = [...state.items];\n            //     state.items[existingCartItemIndex] = updatedItem;\n            //   }\n\n            const id = action.payload;\n\n            const existingItem = state.items.find((item) => item.id === id);\n            state.totalAmount = state.totalAmount - existingItem.price;\n\n            if(existingItem.amount==1) {\n                state.items = state.items.filter((item)=> item.id != id);\n            }\n             \n          \n\n        },\n    }\n});\n\n\n\n// const cartReducer = (state = initialState, action) => {\n\n\n// }\n\n\nconst store = createStore(cartSlice.reducer);\n\nexport const cartActions = cartSlice.reducer;\n\n\nexport default store;"]},"metadata":{},"sourceType":"module"}