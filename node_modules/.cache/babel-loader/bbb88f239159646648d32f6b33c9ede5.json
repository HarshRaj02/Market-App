{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  items: [],\n  totalAmount: 0,\n  tot\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload; // const existingItem = state.items.filter((item) => item.id === newItem.id);\n\n      const existingCartItemIndex = state.items.findIndex(item => item.id === newItem.id);\n      const existingCartItem = state.items[existingCartItemIndex]; // state.totalQuantity = state.totalQuantity + newItem.amount; \n\n      console.log(newItem);\n\n      if (!existingCartItem) {\n        state.items.push(newItem);\n      } else {\n        state.totalAmount = state.totalAmount + existingCartItem.price * existingCartItem.amount;\n        existingCartItem.amount++; // state.totalQuantity = state.totalQuantity + existingCartItem.amount ;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      console.log(id);\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalAmount = state.totalAmount - existingItem.price; // state.totalQuantity--;\n\n      if (existingItem.amount === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.amount--;\n      } // make quantity of cartitems to 0 when confirm is called\n\n    },\n\n    makeCartItemsZero(state) {\n      state.totalQuantity = 0;\n    }\n\n  }\n});\nconst store = createStore(cartSlice.reducer);\nexport default store;\nexport const cartActions = cartSlice.actions;","map":{"version":3,"sources":["/home/harshraj/Desktop/Market-App/src/redux-store/index.js"],"names":["createStore","createSlice","initialState","items","totalAmount","tot","cartSlice","name","reducers","addItemToCart","state","action","newItem","payload","existingCartItemIndex","findIndex","item","id","existingCartItem","console","log","push","price","amount","removeItemFromCart","existingItem","find","filter","makeCartItemsZero","totalQuantity","store","reducer","cartActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAGA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,KAAK,EAAG,EAAV;AAAcC,EAAAA,WAAW,EAAG,CAA5B;AAAgCC,EAAAA;AAAhC,CAArB;AAEA,MAAMC,SAAS,GAAGL,WAAW,CAAC;AAC1BM,EAAAA,IAAI,EAAE,MADoB;AAE1BL,EAAAA,YAF0B;AAG1BM,EAAAA,QAAQ,EAAG;AAEPC,IAAAA,aAAa,CAACC,KAAD,EAAOC,MAAP,EAAe;AAE5B,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB,CAF4B,CAI5B;;AACA,YAAMC,qBAAqB,GAAGJ,KAAK,CAACP,KAAN,CAAYY,SAAZ,CACzBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EADJ,CAA9B;AAIA,YAAMC,gBAAgB,GAAGR,KAAK,CAACP,KAAN,CAAYW,qBAAZ,CAAzB,CAT4B,CAU7B;;AAECK,MAAAA,OAAO,CAACC,GAAR,CAAYR,OAAZ;;AAKA,UAAG,CAACM,gBAAJ,EAAsB;AAElBR,QAAAA,KAAK,CAACP,KAAN,CAAYkB,IAAZ,CAAiBT,OAAjB;AAEH,OAJD,MAKC;AAEIF,QAAAA,KAAK,CAACN,WAAN,GAAoBM,KAAK,CAACN,WAAN,GAAoBc,gBAAgB,CAACI,KAAjB,GAAuBJ,gBAAgB,CAACK,MAAhF;AACAL,QAAAA,gBAAgB,CAACK,MAAjB,GAHJ,CAIG;AACF;AACD,KA9BM;;AAiCPC,IAAAA,kBAAkB,CAACd,KAAD,EAAOC,MAAP,EAAe;AAE7B,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYH,EAAZ;AAEA,YAAMQ,YAAY,GAAGf,KAAK,CAACP,KAAN,CAAYuB,IAAZ,CAAkBV,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAArB;AACAP,MAAAA,KAAK,CAACN,WAAN,GAAoBM,KAAK,CAACN,WAAN,GAAoBqB,YAAY,CAACH,KAArD,CAN6B,CAO9B;;AAEC,UAAGG,YAAY,CAACF,MAAb,KAAwB,CAA3B,EAA8B;AAC1Bb,QAAAA,KAAK,CAACP,KAAN,GAAcO,KAAK,CAACP,KAAN,CAAYwB,MAAZ,CAAoBX,IAAD,IAASA,IAAI,CAACC,EAAL,KAAaA,EAAzC,CAAd;AACH,OAFD,MAIC;AACIQ,QAAAA,YAAY,CAACF,MAAb;AACH,OAf2B,CAiB/B;;AAGD,KArDM;;AAsDPK,IAAAA,iBAAiB,CAAClB,KAAD,EAAQ;AACrBA,MAAAA,KAAK,CAACmB,aAAN,GAAoB,CAApB;AACD;;AAxDI;AAHe,CAAD,CAA7B;AAoEA,MAAMC,KAAK,GAAG9B,WAAW,CAACM,SAAS,CAACyB,OAAX,CAAzB;AACA,eAAeD,KAAf;AAEA,OAAO,MAAME,WAAW,GAAG1B,SAAS,CAAC2B,OAA9B","sourcesContent":["import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\n\n\nconst initialState = { items : [], totalAmount : 0 , tot};\n\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState,\n    reducers : {\n\n        addItemToCart(state,action) {\n\n        const newItem = action.payload;\n\n        // const existingItem = state.items.filter((item) => item.id === newItem.id);\n        const existingCartItemIndex = state.items.findIndex(\n            (item) => item.id === newItem.id\n          );\n\n        const existingCartItem = state.items[existingCartItemIndex]; \n       // state.totalQuantity = state.totalQuantity + newItem.amount; \n\n        console.log(newItem);\n       \n       \n\n\n        if(!existingCartItem) {\n           \n            state.items.push(newItem);\n           \n        } else\n         {\n            \n             state.totalAmount = state.totalAmount + existingCartItem.price*existingCartItem.amount;\n             existingCartItem.amount++;\n            // state.totalQuantity = state.totalQuantity + existingCartItem.amount ;\n         }\n        },\n\n\n        removeItemFromCart(state,action) {\n\n            const id = action.payload;\n            console.log(id);\n\n            const existingItem = state.items.find((item) => item.id === id);\n            state.totalAmount = state.totalAmount - existingItem.price;\n           // state.totalQuantity--;\n\n            if(existingItem.amount === 1) {\n                state.items = state.items.filter((item)=> item.id !==  id);\n            }\n            else\n             {\n                 existingItem.amount--;\n             }\n             \n          // make quantity of cartitems to 0 when confirm is called\n\n         \n        },\n        makeCartItemsZero(state) {\n            state.totalQuantity=0;\n          },\n\n      \n\n    }\n});\n\n\n\nconst store = createStore(cartSlice.reducer);\nexport default store;\n\nexport const cartActions = cartSlice.actions;\n\n\n"]},"metadata":{},"sourceType":"module"}