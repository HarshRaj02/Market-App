{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  items: [],\n  totalAmount: 0\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducer: {\n    addItemToCart(state) {\n      //   updatedTotalAmount =\n      //     state.totalAmount + action.item.price * action.item.amount;\n      state.totalAmount = state.totalAmount + action.item.price * action.item.amount;\n      const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n      const existingCartItem = state.items[existingCartItemIndex]; //let updatedItems;\n\n      if (existingCartItem) {\n        const updatedItem = { ...existingCartItem,\n          amount: existingCartItem.amount + action.item.amount\n        };\n        state.items = [...state.items];\n        state.items[existingCartItemIndex] = updatedItem;\n      } else {\n        state.items = state.items.concat(action.item);\n      }\n    },\n\n    removeItemFromCart(state) {\n      const existingCartItemIndex = state.items.findIndex(item => item.id === action.id);\n      const existingItem = state.items[existingCartItemIndex]; // const updatedTotalAmount = state.totalAmount - existingItem.price;\n\n      state.totalAmount = state.totalAmount - existingItem.price; //let updatedItems;\n\n      if (existingItem.amount === 1) {\n        state.items = state.items.filter(item => item.id !== action.id);\n      } else {\n        const updatedItem = { ...existingItem,\n          amount: existingItem.amount - 1\n        };\n        state.items = [...state.items];\n        state.items[existingCartItemIndex] = updatedItem;\n      }\n    }\n\n  }\n}); // const cartReducer = (state = initialState, action) => {\n// }\n\nconst store = createStore(cartSlice.reducer);\nconst cartActions = cartSlice.actions;\nexport default store;","map":{"version":3,"sources":["/home/harshraj/Desktop/Market-App/src/redux-store/index.js"],"names":["createStore","createSlice","initialState","items","totalAmount","cartSlice","name","reducer","addItemToCart","state","action","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItem","concat","removeItemFromCart","existingItem","filter","store","cartActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAGA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,KAAK,EAAG,EAAV;AAAcC,EAAAA,WAAW,EAAG;AAA5B,CAArB;AAEA,MAAMC,SAAS,GAAGJ,WAAW,CAAC;AAC1BK,EAAAA,IAAI,EAAE,MADoB;AAE1BJ,EAAAA,YAF0B;AAG1BK,EAAAA,OAAO,EAAG;AACNC,IAAAA,aAAa,CAACC,KAAD,EAAQ;AAErB;AACA;AAEEA,MAAAA,KAAK,CAACL,WAAN,GAAsBK,KAAK,CAACL,WAAN,GAAoBM,MAAM,CAACC,IAAP,CAAYC,KAAZ,GAAoBF,MAAM,CAACC,IAAP,CAAYE,MAA1E;AAGA,YAAMC,qBAAqB,GAAGL,KAAK,CAACN,KAAN,CAAYY,SAAZ,CAC3BJ,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAYN,MAAM,CAACC,IAAP,CAAYK,EADN,CAA9B;AAGA,YAAMC,gBAAgB,GAAGR,KAAK,CAACN,KAAN,CAAYW,qBAAZ,CAAzB,CAXmB,CAanB;;AAEA,UAAIG,gBAAJ,EAAsB;AACpB,cAAMC,WAAW,GAAG,EAClB,GAAGD,gBADe;AAElBJ,UAAAA,MAAM,EAAEI,gBAAgB,CAACJ,MAAjB,GAA0BH,MAAM,CAACC,IAAP,CAAYE;AAF5B,SAApB;AAKAJ,QAAAA,KAAK,CAACN,KAAN,GAAc,CAAC,GAAGM,KAAK,CAACN,KAAV,CAAd;AACAM,QAAAA,KAAK,CAACN,KAAN,CAAYW,qBAAZ,IAAqCI,WAArC;AACD,OARD,MASK;AACHT,QAAAA,KAAK,CAACN,KAAN,GAAcM,KAAK,CAACN,KAAN,CAAYgB,MAAZ,CAAmBT,MAAM,CAACC,IAA1B,CAAd;AACD;AACF,KA5BK;;AA+BNS,IAAAA,kBAAkB,CAACX,KAAD,EAAQ;AAEtB,YAAMK,qBAAqB,GAAGL,KAAK,CAACN,KAAN,CAAYY,SAAZ,CACzBJ,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAYN,MAAM,CAACM,EADH,CAA9B;AAGE,YAAMK,YAAY,GAAGZ,KAAK,CAACN,KAAN,CAAYW,qBAAZ,CAArB,CALoB,CAMrB;;AAEAL,MAAAA,KAAK,CAACL,WAAN,GAAoBK,KAAK,CAACL,WAAN,GAAoBiB,YAAY,CAACT,KAArD,CARqB,CAUpB;;AACA,UAAIS,YAAY,CAACR,MAAb,KAAwB,CAA5B,EAA+B;AAC7BJ,QAAAA,KAAK,CAACN,KAAN,GAAcM,KAAK,CAACN,KAAN,CAAYmB,MAAZ,CAAmBX,IAAI,IAAIA,IAAI,CAACK,EAAL,KAAYN,MAAM,CAACM,EAA9C,CAAd;AACD,OAFD,MAEO;AACL,cAAME,WAAW,GAAG,EAAE,GAAGG,YAAL;AAAmBR,UAAAA,MAAM,EAAEQ,YAAY,CAACR,MAAb,GAAsB;AAAjD,SAApB;AACAJ,QAAAA,KAAK,CAACN,KAAN,GAAc,CAAC,GAAGM,KAAK,CAACN,KAAV,CAAd;AACAM,QAAAA,KAAK,CAACN,KAAN,CAAYW,qBAAZ,IAAqCI,WAArC;AACD;AAGN;;AAnDK;AAHgB,CAAD,CAA7B,C,CA4DA;AAGA;;AAGA,MAAMK,KAAK,GAAGvB,WAAW,CAACK,SAAS,CAACE,OAAX,CAAzB;AAEA,MAAMiB,WAAW,GAAGnB,SAAS,CAACoB,OAA9B;AAEA,eAAeF,KAAf","sourcesContent":["import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\n\n\nconst initialState = { items : [], totalAmount : 0};\n\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState,\n    reducer : {\n        addItemToCart(state) {\n\n        //   updatedTotalAmount =\n        //     state.totalAmount + action.item.price * action.item.amount;\n\n          state.totalAmount =   state.totalAmount + action.item.price * action.item.amount;\n\n\n          const existingCartItemIndex = state.items.findIndex(\n            (item) => item.id === action.item.id\n          );\n          const existingCartItem = state.items[existingCartItemIndex];\n\n          //let updatedItems;\n      \n          if (existingCartItem) {\n            const updatedItem = {\n              ...existingCartItem,\n              amount: existingCartItem.amount + action.item.amount,\n            };\n\n            state.items = [...state.items];\n            state.items[existingCartItemIndex] = updatedItem;\n          } \n          else {\n            state.items = state.items.concat(action.item);\n          }\n        },\n\n\n        removeItemFromCart(state) {\n\n            const existingCartItemIndex = state.items.findIndex(\n                (item) => item.id === action.id\n              );\n              const existingItem = state.items[existingCartItemIndex];\n             // const updatedTotalAmount = state.totalAmount - existingItem.price;\n\n             state.totalAmount = state.totalAmount - existingItem.price;\n\n              //let updatedItems;\n              if (existingItem.amount === 1) {\n                state.items = state.items.filter(item => item.id !== action.id);\n              } else {\n                const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n                state.items = [...state.items];\n                state.items[existingCartItemIndex] = updatedItem;\n              }\n          \n\n        },\n    }\n});\n\n\n\n// const cartReducer = (state = initialState, action) => {\n\n\n// }\n\n\nconst store = createStore(cartSlice.reducer);\n\nconst cartActions = cartSlice.actions;\n\nexport default store;"]},"metadata":{},"sourceType":"module"}