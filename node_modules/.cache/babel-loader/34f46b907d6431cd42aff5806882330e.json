{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  items: [],\n  totalAmount: 0,\n  totalQuantity: 0\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingCartItemIndex = state.items.findIndex(item => item.id === newItem.id);\n      const existingCartItem = state.items[existingCartItemIndex];\n      console.log(newItem);\n\n      if (!existingCartItem) {\n        state.items.push(newItem);\n        state.totalAmount = state.totalAmount + newItem.amount * newItem.price;\n      } else {\n        state.totalAmount = state.totalAmount + existingCartItem.price;\n        state.items[existingCartItemIndex].amount = state.items[existingCartItemIndex].amount + newItem.amount;\n      }\n\n      state.totalQuantity = state.items.reduce((curNumber, item) => {\n        return curNumber + item.amount;\n      }, 0);\n      state.isModalVisible = true;\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      console.log(id);\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalAmount = state.totalAmount - existingItem.price;\n\n      if (existingItem.amount === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.amount--;\n      }\n\n      state.totalQuantity = state.items.reduce((curNumber, item) => {\n        return curNumber + item.amount;\n      }, 0);\n    },\n\n    makeCartItemsZero(state) {\n      state.totalQuantity = 0;\n      state.items = [];\n      state.totalAmount = 0;\n    },\n\n    toggleModalVisibility(state, action) {\n      state.isModalVisible = action.payload;\n    },\n\n    addItemToCartOnce(state, action) {\n      const newItem = action.payload;\n      const existingCartItemIndex = state.items.findIndex(item => item.id === newItem.id);\n      state.totalAmount = state.totalAmount + state.items[existingCartItemIndex].price;\n      state.items[existingCartItemIndex].amount = state.items[existingCartItemIndex].amount + 1;\n      state.totalQuantity = state.items.reduce((curNumber, item) => {\n        return curNumber + item.amount;\n      }, 0);\n    }\n\n  }\n});\nconst store = createStore(cartSlice.reducer);\nexport default store;\nexport const cartActions = cartSlice.actions;","map":{"version":3,"sources":["/home/harshraj/Desktop/Market-App/src/redux-store/index.js"],"names":["createStore","createSlice","initialState","items","totalAmount","totalQuantity","cartSlice","name","reducers","addItemToCart","state","action","newItem","payload","existingCartItemIndex","findIndex","item","id","existingCartItem","console","log","push","amount","price","reduce","curNumber","isModalVisible","removeItemFromCart","existingItem","find","filter","makeCartItemsZero","toggleModalVisibility","addItemToCartOnce","store","reducer","cartActions","actions"],"mappings":"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","sourcesContent":["import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\n\n\nconst initialState = { items : [], totalAmount : 0 , totalQuantity: 0};\n\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState,\n    reducers : {\n\n        addItemToCart(state,action) {\n\n        const newItem = action.payload;\n\n       \n        const existingCartItemIndex = state.items.findIndex(\n            (item) => item.id === newItem.id\n          );\n\n        const existingCartItem = state.items[existingCartItemIndex]; \n       \n        console.log(newItem);\n       \n       \n\n\n        if(!existingCartItem) {\n           \n            state.items.push(newItem);\n            state.totalAmount = state.totalAmount + newItem.amount*newItem.price;\n           \n        } else\n         {\n            \n             state.totalAmount = state.totalAmount + existingCartItem.price;\n             state.items[existingCartItemIndex].amount = state.items[existingCartItemIndex].amount + newItem.amount;\n         }\n\n\n        state.totalQuantity = state.items.reduce((curNumber, item) => {\n            return curNumber + item.amount;\n          }, 0);\n\n          state.isModalVisible = true;\n        },\n\n\n        removeItemFromCart(state,action) {\n\n            const id = action.payload;\n            console.log(id);\n\n            const existingItem = state.items.find((item) => item.id === id);\n            state.totalAmount = state.totalAmount - existingItem.price;\n           \n            if(existingItem.amount === 1) {\n                state.items = state.items.filter((item)=> item.id !==  id);\n            }\n            else\n             {\n                 existingItem.amount--;\n             }\n\n             state.totalQuantity = state.items.reduce((curNumber, item) => {\n                return curNumber + item.amount;\n              }, 0);\n        \n        },\n\n        makeCartItemsZero(state) {\n            state.totalQuantity=0;\n            state.items = [];\n            state.totalAmount = 0;\n\n          },\n\n        toggleModalVisibility(state,action) {\n\n            state.isModalVisible = action.payload;\n        } , \n\n        addItemToCartOnce(state,action) {\n            const newItem = action.payload;\n\n       \n            const existingCartItemIndex = state.items.findIndex(\n                (item) => item.id === newItem.id\n            );\n\n     \n             state.totalAmount = state.totalAmount + state.items[existingCartItemIndex].price;\n             state.items[existingCartItemIndex].amount = state.items[existingCartItemIndex].amount + 1;\n         \n\n\n            state.totalQuantity = state.items.reduce((curNumber, item) => {\n                return curNumber + item.amount;\n            }, 0);\n        }  \n\n    }\n});\n\n\n\nconst store = createStore(cartSlice.reducer);\nexport default store;\n\nexport const cartActions = cartSlice.actions;\n\n\n"]},"metadata":{},"sourceType":"module"}