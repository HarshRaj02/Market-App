{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  items: [],\n  totalAmount: 0\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducer: {\n    addItemToCart(state, action) {\n      // //   updatedTotalAmount =\n      // //     state.totalAmount + action.item.price * action.item.amount;\n      //   //state.totalAmount =   state.totalAmount + action.item.price * action.item.amount;\n      //   state.totalAmount =   state.totalAmount + action.payload.price * action.payload.amount;\n      const newItem = action.payload;\n      const existingItem = state.items.filter(item => item.id === newItem.id);\n\n      if (!existingItem) {\n        state.items.push(newItem);\n      } else {\n        existingItem.amount++;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      // const existingCartItemIndex = state.items.findIndex(\n      //    // (item) => item.id === action.id\n      //    (item) => item.id === action.payload\n      //   );\n      //   const existingItem = state.items[existingCartItemIndex];\n      //  // const updatedTotalAmount = state.totalAmount - existingItem.price;\n      //  state.totalAmount = state.totalAmount - existingItem.price;\n      //   //let updatedItems;\n      //   if (existingItem.amount === 1) {\n      //     state.items = state.items.filter(item => item.id !== action.payload);\n      //   } else {\n      //     const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n      //     state.items = [...state.items];\n      //     state.items[existingCartItemIndex] = updatedItem;\n      //   }\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalAmount = state.totalAmount - existingItem.price;\n\n      if (existingItem.amount == 1) {\n        state.items = state.items.filter(item => item.id != id);\n      } else {\n        existingItem.amount--;\n      }\n    }\n\n  }\n}); // const cartReducer = (state = initialState, action) => {\n// }\n\nconst store = createStore(cartSlice.reducer);\nexport const cartActions = cartSlice.actions;\nexport default store;","map":{"version":3,"sources":["/home/harshraj/Desktop/Market-App/src/redux-store/index.js"],"names":["createStore","createSlice","initialState","items","totalAmount","cartSlice","name","reducer","addItemToCart","state","action","newItem","payload","existingItem","filter","item","id","push","amount","removeItemFromCart","find","price","store","cartActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAGA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,KAAK,EAAG,EAAV;AAAcC,EAAAA,WAAW,EAAG;AAA5B,CAArB;AAEA,MAAMC,SAAS,GAAGJ,WAAW,CAAC;AAC1BK,EAAAA,IAAI,EAAE,MADoB;AAE1BJ,EAAAA,YAF0B;AAG1BK,EAAAA,OAAO,EAAG;AACNC,IAAAA,aAAa,CAACC,KAAD,EAAOC,MAAP,EAAe;AAE5B;AACA;AAEA;AACA;AAGA,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AAEA,YAAMC,YAAY,GAAGJ,KAAK,CAACN,KAAN,CAAYW,MAAZ,CAAoBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAAjD,CAArB;;AAEA,UAAG,CAACH,YAAJ,EAAkB;AACdJ,QAAAA,KAAK,CAACN,KAAN,CAAYc,IAAZ,CAAiBN,OAAjB;AACH,OAFD,MAGC;AACIE,QAAAA,YAAY,CAACK,MAAb;AACH;AACD,KApBK;;AAuBNC,IAAAA,kBAAkB,CAACV,KAAD,EAAOC,MAAP,EAAe;AAE7B;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AAEA,YAAMC,YAAY,GAAGJ,KAAK,CAACN,KAAN,CAAYiB,IAAZ,CAAkBL,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAArB;AACAP,MAAAA,KAAK,CAACL,WAAN,GAAoBK,KAAK,CAACL,WAAN,GAAoBS,YAAY,CAACQ,KAArD;;AAEA,UAAGR,YAAY,CAACK,MAAb,IAAqB,CAAxB,EAA2B;AACvBT,QAAAA,KAAK,CAACN,KAAN,GAAcM,KAAK,CAACN,KAAN,CAAYW,MAAZ,CAAoBC,IAAD,IAASA,IAAI,CAACC,EAAL,IAAWA,EAAvC,CAAd;AACH,OAFD,MAIC;AACIH,QAAAA,YAAY,CAACK,MAAb;AACH;AAIL;;AA1DK;AAHgB,CAAD,CAA7B,C,CAmEA;AAGA;;AAGA,MAAMI,KAAK,GAAGtB,WAAW,CAACK,SAAS,CAACE,OAAX,CAAzB;AAEA,OAAO,MAAMgB,WAAW,GAAGlB,SAAS,CAACmB,OAA9B;AAGP,eAAeF,KAAf","sourcesContent":["import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\n\n\nconst initialState = { items : [], totalAmount : 0};\n\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState,\n    reducer : {\n        addItemToCart(state,action) {\n\n        // //   updatedTotalAmount =\n        // //     state.totalAmount + action.item.price * action.item.amount;\n\n        //   //state.totalAmount =   state.totalAmount + action.item.price * action.item.amount;\n        //   state.totalAmount =   state.totalAmount + action.payload.price * action.payload.amount;\n\n\n        const newItem = action.payload;\n\n        const existingItem = state.items.filter((item) => item.id === newItem.id);\n\n        if(!existingItem) {\n            state.items.push(newItem);\n        } else\n         {\n             existingItem.amount++;\n         }\n        },\n\n\n        removeItemFromCart(state,action) {\n\n            // const existingCartItemIndex = state.items.findIndex(\n            //    // (item) => item.id === action.id\n            //    (item) => item.id === action.payload\n            //   );\n            //   const existingItem = state.items[existingCartItemIndex];\n            //  // const updatedTotalAmount = state.totalAmount - existingItem.price;\n\n            //  state.totalAmount = state.totalAmount - existingItem.price;\n\n            //   //let updatedItems;\n            //   if (existingItem.amount === 1) {\n            //     state.items = state.items.filter(item => item.id !== action.payload);\n            //   } else {\n            //     const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n            //     state.items = [...state.items];\n            //     state.items[existingCartItemIndex] = updatedItem;\n            //   }\n\n            const id = action.payload;\n\n            const existingItem = state.items.find((item) => item.id === id);\n            state.totalAmount = state.totalAmount - existingItem.price;\n\n            if(existingItem.amount==1) {\n                state.items = state.items.filter((item)=> item.id != id);\n            }\n            else\n             {\n                 existingItem.amount--;\n             }\n             \n          \n\n        },\n    }\n});\n\n\n\n// const cartReducer = (state = initialState, action) => {\n\n\n// }\n\n\nconst store = createStore(cartSlice.reducer);\n\nexport const cartActions = cartSlice.actions;\n\n\nexport default store;"]},"metadata":{},"sourceType":"module"}